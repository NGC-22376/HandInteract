#基于论文复现的位置传感器算法，筛选出DeepConvlLSTM和ResBiLSTM两个算法。

#DeepConvlLSTM
def DeepConvLSTM():
    class Model(nn.Module):
        def __init__(self, input_channels=6, hidden_size=128, num_classes=53):
            super().__init__()
            self.conv1 = nn.Conv2d(1, 64, kernel_size=(5, 1), stride=1, padding=(2, 0))
            self.conv2 = nn.Conv2d(64, 64, kernel_size=(5, 1), stride=1, padding=(2, 0))
            self.conv3 = nn.Conv2d(64, 64, kernel_size=(5, 1), stride=1, padding=(2, 0))
            self.conv4 = nn.Conv2d(64, 64, kernel_size=(5, 1), stride=1, padding=(2, 0))
            self.lstm = nn.LSTM(input_size=64, hidden_size=hidden_size, batch_first=True, num_layers=2)
            self.fc = nn.Linear(hidden_size, num_classes)
            self.relu = nn.ReLU()
            self.dropout = nn.Dropout(0.5)

        def forward(self, x):
            x = self.relu(self.conv1(x))
            x = self.relu(self.conv2(x))
            x = self.relu(self.conv3(x))
            x = self.relu(self.conv4(x))
            x = x.squeeze(1).permute(0, 2, 1) 
            x, _ = self.lstm(x)
            x = self.fc(self.dropout(x[:, -1, :]))
            return x
   
    return Model()


#ResBiLSTM
class ResBiLSTM(nn.Module):
    def __init__(self, input_size=6, hidden_size=128, num_classes=53, num_layers=2, dropout=0.5):
        super(ResBiLSTM, self).__init__()
        self.hidden_size = hidden_size
        self.num_layers = num_layers
        
        self.bilstm=nn.LSTM(input_size,hidden_size, num_layers=num_layers, batch_first=True, 
                              bidirectional=True, dropout=dropout)
        
        self.residual_fc = nn.Linear(input_size, 2 * hidden_size)  
        
        self.fc = nn.Linear(2 * hidden_size, num_classes)
        self.dropout = nn.Dropout(dropout)
        
    def forward(self, x):
        residual = self.residual_fc(x)  
        lstm_out, _ = self.bilstm(x)  
        out = lstm_out[:, -1, :]  
        out = self.fc(self.dropout(out + residual))  
        return out
